Configuraci√≥n del entorno de desarrollo
‚†Ä‚†Ä‚†Ä‚†Ä
Hola!, les dejo las definiciones de los siguientes conceptos para reafirmar las bases que ya tenemos sobre el desarrollo. üòÅ
‚†Ä‚†Ä‚†Ä‚†Ä
Git Ignore:
‚†Ä‚†Ä‚†Ä‚†Ä
Son archivos ignorados que suelen ser artefactos de compilaci√≥n y archivos generados por el equipo que pueden derivarse de tu fuente de repositorios o que no deber√≠an confirmarse por alg√∫n otro motivo. Ejemplo: node_modules.

Linters:
‚†Ä‚†Ä‚†Ä‚†Ä
Herramientas que realizan la lectura del c√≥digo fuente

Detectan errores/warnings de c√≥digo
Variables sin usar o no definida, llave sin cerrar‚Ä¶
‚†Ä‚†Ä‚†Ä‚†Ä
Nodemon:
‚†Ä‚†Ä‚†Ä‚†Ä
Es una herramienta que ayuda a desarrollar aplicaciones en Node.js al reiniciar la aplicaci√≥n aut√≥maticamente cuando hay cambios en el archivo.
‚†Ä‚†Ä‚†Ä‚†Ä
gitignore.io:
‚†Ä‚†Ä‚†Ä‚†Ä
Contiene la configuraci√≥n del entorno que espec√≠fiques
‚†Ä‚†Ä‚†Ä‚†Ä
Editor Config:
‚†Ä‚†Ä‚†Ä‚†Ä
Todos los desarrolladores tendr√°n la misma configuraci√≥n del proyecto.

Express ocupa el metodo get, para recibir las rutas en el servidor

Se puede responder con un mensaje

res.send('Contenido de respuesta');
O una respuestas en formato JSON

res.json({
    name: 'Producto 1',
    price: 1000
  });

REST: Representational State Transfer
Es una conveccion que se refiere a servicios web por protocolo HTTP

Metodos:

Get: Obtener
Put: Modificar/Actualizar
Patch: Modificar/Actualizar
Post: Crear
Delete: Eliminar
Patch
El m√©todo de solicitud HTTP PATCH aplica modificaciones parciales a un recurso.

PATCH es algo an√°logo al concepto de ‚Äúactualizaci√≥n‚Äù que se encuentra en CRUD, Una solicitud se considera un conjunto de instrucciones sobre c√≥mo modificar un recurso. Contrasta esto con PUT; que es una representaci√≥n completa de un recurso.PATCH

Mo es necesariamente idempotente, aunque puede serlo. Contrasta esto con PUT; que siempre es idempotente.

La palabra ‚Äúidempotente‚Äù significa que cualquier n√∫mero de solicitudes repetidas e id√©nticas dejar√° el recurso en el mismo estado.

Por ejemplo, si un campo de contador de incremento autom√°tico es una parte integral del recurso, entonces un PUT lo sobrescribir√° naturalmente (ya que sobrescribe todo), pero no necesariamente para .PATCH

PATCH (como POST) puede tener efectos secundarios sobre otros recursos.

GET: Recibir parametros & Parametros Query
al utilizar app.get ya podemos empezar a usar este verbo en nuestro endpoint.

Al colocar : en la ruta, podemos tomar ese valor como parametro:

'/product/:id'
para tomar los parametros que se envian a trav√©s de la ruta, podemos usar el objeto req.params . All√≠ se almacenar√°n todos los parametros que enviemos en la url

app.get('/products/:id', (req, res) => {
  const { id } = req.params;
}
a partir de ese id, podemos acceder a otros endPoints a part√≠r de all√≠. Por ejemplo

app.get('categories/:categoryID/products/:productID', (req, res) => {
  const { categoryID, productID } = req.params;
	app.json({
		categoryID,
		productID
	})
}
Parametros Query
Se utilizan para hacer filtros a la informaci√≥n que queremos de nuestra API.

Puede ayudarnos a paginar, a establecer limites, incluso buscar palabras que coincidan con un valor.

Los endpoints especificos deben declararsen antes de los endpoints dinamicos. Uno de los mandamientos

Express.Router
Crea un controlador(handler) de rutas modulares y montables. Una instancia de Router es un sistema de enrutamiento y middleware completo, por esa raz√≥n lo podemos tomar como si fuera una mini app.

Cada modulo de nuestras rutas es una mini aplicaci√≥n en la que creamos sus rutas independientes y podemos incluirle middlewares, que se ejecutar√°n cuando se coincida con el path.

Qu√© es un middleware?
Un middleware es un bloque de c√≥digo que se ejecuta entre la petici√≥n que hace el usuario (request) hasta que la petici√≥n llega al servidor.

Fuente:

Middlewares en Node.js

App.use
app.use Lo que hace es montar un middleware en la ruta especificada. Por ejemplo:

var express = require('express')
var router = express.Router()

// middleware espec√≠fico a este router
router.use('/', function (req, res, next) {
  console.log('Hola, soy el middleware')
  next() // se utiliza para que se ejecute el router.get
})
// define the home page route
router.get('/', function (req, res) {
  res.send('Birds home page')
})
// define the about route
router.get('/about', function (req, res) {
  res.send('About birds')
})

module.exports = router

El t√©rmino middleware se refiere a un sistema de software que ofrece servicios y funciones comunes para las aplicaciones. En general, el middleware se encarga de las tareas de gesti√≥n de datos, servicios de aplicaciones, mensajer√≠a, autenticaci√≥n y gesti√≥n de API.
‚†Ä‚†Ä‚†Ä
Ayuda a los desarrolladores a dise√±ar aplicaciones con mayor eficiencia. Adem√°s, act√∫a como hilo conductor entre las aplicaciones, los datos y los usuarios.

PUT requiere enviar una representaci√≥n completa del recurso que se est√° modificando, se debe implementar de forma idempotente y es adecuado para situaciones en las que una aplicaci√≥n debe asegurarse que el estado final del recurso ser√° id√©ntica a la que env√≠a.

PATCH es adecuado para hacer modificaciones parciales, o para enviar un conjunto de instrucciones en lugar del resultado final.

DELETE no requiere de un formato en especial solo con el identificador para borrar un recurso en especifico.
